// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simconnectData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_simconnectData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_simconnectData_2eproto

#include <limits>
#include <string>

/*#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>*/
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_simconnectData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_simconnectData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simconnectData_2eproto;
namespace simConnect {
class simData;
class simDataDefaultTypeInternal;
extern simDataDefaultTypeInternal _simData_default_instance_;
}  // namespace simConnect
PROTOBUF_NAMESPACE_OPEN
template<> ::simConnect::simData* Arena::CreateMaybeMessage<::simConnect::simData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace simConnect {

// ===================================================================

class simData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simConnect.simData) */ {
 public:
  inline simData() : simData(nullptr) {}
  virtual ~simData();

  simData(const simData& from);
  simData(simData&& from) noexcept
    : simData() {
    *this = ::std::move(from);
  }

  inline simData& operator=(const simData& from) {
    CopyFrom(from);
    return *this;
  }
  inline simData& operator=(simData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const simData& default_instance();

  static inline const simData* internal_default_instance() {
    return reinterpret_cast<const simData*>(
               &_simData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(simData& a, simData& b) {
    a.Swap(&b);
  }
  inline void Swap(simData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(simData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline simData* New() const final {
    return CreateMaybeMessage<simData>(nullptr);
  }

  simData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<simData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const simData& from);
  void MergeFrom(const simData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(simData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simConnect.simData";
  }
  protected:
  explicit simData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simconnectData_2eproto);
    return ::descriptor_table_simconnectData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSzTitleFieldNumber = 1,
    kDAbsoluteTimeFieldNumber = 2,
    kDTimeFieldNumber = 3,
    kUDayOfTheYearFieldNumber = 4,
    kUYearFieldNumber = 5,
    kUMonthOfTheYearFieldNumber = 6,
    kUDayOfTheMonthFieldNumber = 7,
    kUDayOfTheWeekFieldNumber = 8,
    kUTimeZoneOffsetFieldNumber = 9,
    kDSimTimeFieldNumber = 10,
    kDLatitudeFieldNumber = 11,
    kDLongitudeFieldNumber = 12,
    kDAltitudeFieldNumber = 13,
    kDPitchFieldNumber = 14,
    kDBankFieldNumber = 15,
    kDHeadingFieldNumber = 16,
    kDVelocityXFieldNumber = 17,
    kDVelocityYFieldNumber = 18,
    kDVelocityZFieldNumber = 19,
    kDTemperatureFieldNumber = 20,
    kDAirPressureFieldNumber = 21,
    kDAirDensityFieldNumber = 22,
    kDWindVelocityFieldNumber = 23,
    kDWindDirectionFieldNumber = 24,
    kDWindXFieldNumber = 25,
    kDWindYFieldNumber = 26,
    kDWindZFieldNumber = 27,
  };
  // required string szTitle = 1;
  bool has_sztitle() const;
  private:
  bool _internal_has_sztitle() const;
  public:
  void clear_sztitle();
  const std::string& sztitle() const;
  void set_sztitle(const std::string& value);
  void set_sztitle(std::string&& value);
  void set_sztitle(const char* value);
  void set_sztitle(const char* value, size_t size);
  std::string* mutable_sztitle();
  std::string* release_sztitle();
  void set_allocated_sztitle(std::string* sztitle);
  private:
  const std::string& _internal_sztitle() const;
  void _internal_set_sztitle(const std::string& value);
  std::string* _internal_mutable_sztitle();
  public:

  // required double dAbsoluteTime = 2;
  bool has_dabsolutetime() const;
  private:
  bool _internal_has_dabsolutetime() const;
  public:
  void clear_dabsolutetime();
  double dabsolutetime() const;
  void set_dabsolutetime(double value);
  private:
  double _internal_dabsolutetime() const;
  void _internal_set_dabsolutetime(double value);
  public:

  // required double dTime = 3;
  bool has_dtime() const;
  private:
  bool _internal_has_dtime() const;
  public:
  void clear_dtime();
  double dtime() const;
  void set_dtime(double value);
  private:
  double _internal_dtime() const;
  void _internal_set_dtime(double value);
  public:

  // required int32 uDayOfTheYear = 4;
  bool has_udayoftheyear() const;
  private:
  bool _internal_has_udayoftheyear() const;
  public:
  void clear_udayoftheyear();
  ::PROTOBUF_NAMESPACE_ID::int32 udayoftheyear() const;
  void set_udayoftheyear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udayoftheyear() const;
  void _internal_set_udayoftheyear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 uYear = 5;
  bool has_uyear() const;
  private:
  bool _internal_has_uyear() const;
  public:
  void clear_uyear();
  ::PROTOBUF_NAMESPACE_ID::int32 uyear() const;
  void set_uyear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uyear() const;
  void _internal_set_uyear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 uMonthOfTheYear = 6;
  bool has_umonthoftheyear() const;
  private:
  bool _internal_has_umonthoftheyear() const;
  public:
  void clear_umonthoftheyear();
  ::PROTOBUF_NAMESPACE_ID::int32 umonthoftheyear() const;
  void set_umonthoftheyear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_umonthoftheyear() const;
  void _internal_set_umonthoftheyear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 uDayOfTheMonth = 7;
  bool has_udayofthemonth() const;
  private:
  bool _internal_has_udayofthemonth() const;
  public:
  void clear_udayofthemonth();
  ::PROTOBUF_NAMESPACE_ID::int32 udayofthemonth() const;
  void set_udayofthemonth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udayofthemonth() const;
  void _internal_set_udayofthemonth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 uDayOfTheWeek = 8;
  bool has_udayoftheweek() const;
  private:
  bool _internal_has_udayoftheweek() const;
  public:
  void clear_udayoftheweek();
  ::PROTOBUF_NAMESPACE_ID::int32 udayoftheweek() const;
  void set_udayoftheweek(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udayoftheweek() const;
  void _internal_set_udayoftheweek(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 uTimeZoneOffset = 9;
  bool has_utimezoneoffset() const;
  private:
  bool _internal_has_utimezoneoffset() const;
  public:
  void clear_utimezoneoffset();
  ::PROTOBUF_NAMESPACE_ID::int32 utimezoneoffset() const;
  void set_utimezoneoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_utimezoneoffset() const;
  void _internal_set_utimezoneoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required double dSimTime = 10;
  bool has_dsimtime() const;
  private:
  bool _internal_has_dsimtime() const;
  public:
  void clear_dsimtime();
  double dsimtime() const;
  void set_dsimtime(double value);
  private:
  double _internal_dsimtime() const;
  void _internal_set_dsimtime(double value);
  public:

  // required double dLatitude = 11;
  bool has_dlatitude() const;
  private:
  bool _internal_has_dlatitude() const;
  public:
  void clear_dlatitude();
  double dlatitude() const;
  void set_dlatitude(double value);
  private:
  double _internal_dlatitude() const;
  void _internal_set_dlatitude(double value);
  public:

  // required double dLongitude = 12;
  bool has_dlongitude() const;
  private:
  bool _internal_has_dlongitude() const;
  public:
  void clear_dlongitude();
  double dlongitude() const;
  void set_dlongitude(double value);
  private:
  double _internal_dlongitude() const;
  void _internal_set_dlongitude(double value);
  public:

  // required double dAltitude = 13;
  bool has_daltitude() const;
  private:
  bool _internal_has_daltitude() const;
  public:
  void clear_daltitude();
  double daltitude() const;
  void set_daltitude(double value);
  private:
  double _internal_daltitude() const;
  void _internal_set_daltitude(double value);
  public:

  // required double dPitch = 14;
  bool has_dpitch() const;
  private:
  bool _internal_has_dpitch() const;
  public:
  void clear_dpitch();
  double dpitch() const;
  void set_dpitch(double value);
  private:
  double _internal_dpitch() const;
  void _internal_set_dpitch(double value);
  public:

  // required double dBank = 15;
  bool has_dbank() const;
  private:
  bool _internal_has_dbank() const;
  public:
  void clear_dbank();
  double dbank() const;
  void set_dbank(double value);
  private:
  double _internal_dbank() const;
  void _internal_set_dbank(double value);
  public:

  // required double dHeading = 16;
  bool has_dheading() const;
  private:
  bool _internal_has_dheading() const;
  public:
  void clear_dheading();
  double dheading() const;
  void set_dheading(double value);
  private:
  double _internal_dheading() const;
  void _internal_set_dheading(double value);
  public:

  // required double dVelocityX = 17;
  bool has_dvelocityx() const;
  private:
  bool _internal_has_dvelocityx() const;
  public:
  void clear_dvelocityx();
  double dvelocityx() const;
  void set_dvelocityx(double value);
  private:
  double _internal_dvelocityx() const;
  void _internal_set_dvelocityx(double value);
  public:

  // required double dVelocityY = 18;
  bool has_dvelocityy() const;
  private:
  bool _internal_has_dvelocityy() const;
  public:
  void clear_dvelocityy();
  double dvelocityy() const;
  void set_dvelocityy(double value);
  private:
  double _internal_dvelocityy() const;
  void _internal_set_dvelocityy(double value);
  public:

  // required double dVelocityZ = 19;
  bool has_dvelocityz() const;
  private:
  bool _internal_has_dvelocityz() const;
  public:
  void clear_dvelocityz();
  double dvelocityz() const;
  void set_dvelocityz(double value);
  private:
  double _internal_dvelocityz() const;
  void _internal_set_dvelocityz(double value);
  public:

  // required double dTemperature = 20;
  bool has_dtemperature() const;
  private:
  bool _internal_has_dtemperature() const;
  public:
  void clear_dtemperature();
  double dtemperature() const;
  void set_dtemperature(double value);
  private:
  double _internal_dtemperature() const;
  void _internal_set_dtemperature(double value);
  public:

  // required double dAirPressure = 21;
  bool has_dairpressure() const;
  private:
  bool _internal_has_dairpressure() const;
  public:
  void clear_dairpressure();
  double dairpressure() const;
  void set_dairpressure(double value);
  private:
  double _internal_dairpressure() const;
  void _internal_set_dairpressure(double value);
  public:

  // required double dAirDensity = 22;
  bool has_dairdensity() const;
  private:
  bool _internal_has_dairdensity() const;
  public:
  void clear_dairdensity();
  double dairdensity() const;
  void set_dairdensity(double value);
  private:
  double _internal_dairdensity() const;
  void _internal_set_dairdensity(double value);
  public:

  // required double dWindVelocity = 23;
  bool has_dwindvelocity() const;
  private:
  bool _internal_has_dwindvelocity() const;
  public:
  void clear_dwindvelocity();
  double dwindvelocity() const;
  void set_dwindvelocity(double value);
  private:
  double _internal_dwindvelocity() const;
  void _internal_set_dwindvelocity(double value);
  public:

  // required double dWindDirection = 24;
  bool has_dwinddirection() const;
  private:
  bool _internal_has_dwinddirection() const;
  public:
  void clear_dwinddirection();
  double dwinddirection() const;
  void set_dwinddirection(double value);
  private:
  double _internal_dwinddirection() const;
  void _internal_set_dwinddirection(double value);
  public:

  // required double dWindX = 25;
  bool has_dwindx() const;
  private:
  bool _internal_has_dwindx() const;
  public:
  void clear_dwindx();
  double dwindx() const;
  void set_dwindx(double value);
  private:
  double _internal_dwindx() const;
  void _internal_set_dwindx(double value);
  public:

  // required double dWindY = 26;
  bool has_dwindy() const;
  private:
  bool _internal_has_dwindy() const;
  public:
  void clear_dwindy();
  double dwindy() const;
  void set_dwindy(double value);
  private:
  double _internal_dwindy() const;
  void _internal_set_dwindy(double value);
  public:

  // required double dWindZ = 27;
  bool has_dwindz() const;
  private:
  bool _internal_has_dwindz() const;
  public:
  void clear_dwindz();
  double dwindz() const;
  void set_dwindz(double value);
  private:
  double _internal_dwindz() const;
  void _internal_set_dwindz(double value);
  public:

  // @@protoc_insertion_point(class_scope:simConnect.simData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sztitle_;
  double dabsolutetime_;
  double dtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 udayoftheyear_;
  ::PROTOBUF_NAMESPACE_ID::int32 uyear_;
  ::PROTOBUF_NAMESPACE_ID::int32 umonthoftheyear_;
  ::PROTOBUF_NAMESPACE_ID::int32 udayofthemonth_;
  ::PROTOBUF_NAMESPACE_ID::int32 udayoftheweek_;
  ::PROTOBUF_NAMESPACE_ID::int32 utimezoneoffset_;
  double dsimtime_;
  double dlatitude_;
  double dlongitude_;
  double daltitude_;
  double dpitch_;
  double dbank_;
  double dheading_;
  double dvelocityx_;
  double dvelocityy_;
  double dvelocityz_;
  double dtemperature_;
  double dairpressure_;
  double dairdensity_;
  double dwindvelocity_;
  double dwinddirection_;
  double dwindx_;
  double dwindy_;
  double dwindz_;
  friend struct ::TableStruct_simconnectData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// simData

// required string szTitle = 1;
inline bool simData::_internal_has_sztitle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool simData::has_sztitle() const {
  return _internal_has_sztitle();
}
inline void simData::clear_sztitle() {
  sztitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& simData::sztitle() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.szTitle)
  return _internal_sztitle();
}
inline void simData::set_sztitle(const std::string& value) {
  _internal_set_sztitle(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.szTitle)
}
inline std::string* simData::mutable_sztitle() {
  // @@protoc_insertion_point(field_mutable:simConnect.simData.szTitle)
  return _internal_mutable_sztitle();
}
inline const std::string& simData::_internal_sztitle() const {
  return sztitle_.Get();
}
inline void simData::_internal_set_sztitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sztitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void simData::set_sztitle(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sztitle_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simConnect.simData.szTitle)
}
inline void simData::set_sztitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sztitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simConnect.simData.szTitle)
}
inline void simData::set_sztitle(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sztitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simConnect.simData.szTitle)
}
inline std::string* simData::_internal_mutable_sztitle() {
  _has_bits_[0] |= 0x00000001u;
  return sztitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* simData::release_sztitle() {
  // @@protoc_insertion_point(field_release:simConnect.simData.szTitle)
  if (!_internal_has_sztitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sztitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void simData::set_allocated_sztitle(std::string* sztitle) {
  if (sztitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sztitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sztitle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simConnect.simData.szTitle)
}

// required double dAbsoluteTime = 2;
inline bool simData::_internal_has_dabsolutetime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool simData::has_dabsolutetime() const {
  return _internal_has_dabsolutetime();
}
inline void simData::clear_dabsolutetime() {
  dabsolutetime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double simData::_internal_dabsolutetime() const {
  return dabsolutetime_;
}
inline double simData::dabsolutetime() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dAbsoluteTime)
  return _internal_dabsolutetime();
}
inline void simData::_internal_set_dabsolutetime(double value) {
  _has_bits_[0] |= 0x00000002u;
  dabsolutetime_ = value;
}
inline void simData::set_dabsolutetime(double value) {
  _internal_set_dabsolutetime(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dAbsoluteTime)
}

// required double dTime = 3;
inline bool simData::_internal_has_dtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool simData::has_dtime() const {
  return _internal_has_dtime();
}
inline void simData::clear_dtime() {
  dtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double simData::_internal_dtime() const {
  return dtime_;
}
inline double simData::dtime() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dTime)
  return _internal_dtime();
}
inline void simData::_internal_set_dtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  dtime_ = value;
}
inline void simData::set_dtime(double value) {
  _internal_set_dtime(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dTime)
}

// required int32 uDayOfTheYear = 4;
inline bool simData::_internal_has_udayoftheyear() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool simData::has_udayoftheyear() const {
  return _internal_has_udayoftheyear();
}
inline void simData::clear_udayoftheyear() {
  udayoftheyear_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::_internal_udayoftheyear() const {
  return udayoftheyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::udayoftheyear() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.uDayOfTheYear)
  return _internal_udayoftheyear();
}
inline void simData::_internal_set_udayoftheyear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  udayoftheyear_ = value;
}
inline void simData::set_udayoftheyear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udayoftheyear(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.uDayOfTheYear)
}

// required int32 uYear = 5;
inline bool simData::_internal_has_uyear() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool simData::has_uyear() const {
  return _internal_has_uyear();
}
inline void simData::clear_uyear() {
  uyear_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::_internal_uyear() const {
  return uyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::uyear() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.uYear)
  return _internal_uyear();
}
inline void simData::_internal_set_uyear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  uyear_ = value;
}
inline void simData::set_uyear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uyear(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.uYear)
}

// required int32 uMonthOfTheYear = 6;
inline bool simData::_internal_has_umonthoftheyear() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool simData::has_umonthoftheyear() const {
  return _internal_has_umonthoftheyear();
}
inline void simData::clear_umonthoftheyear() {
  umonthoftheyear_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::_internal_umonthoftheyear() const {
  return umonthoftheyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::umonthoftheyear() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.uMonthOfTheYear)
  return _internal_umonthoftheyear();
}
inline void simData::_internal_set_umonthoftheyear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  umonthoftheyear_ = value;
}
inline void simData::set_umonthoftheyear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_umonthoftheyear(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.uMonthOfTheYear)
}

// required int32 uDayOfTheMonth = 7;
inline bool simData::_internal_has_udayofthemonth() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool simData::has_udayofthemonth() const {
  return _internal_has_udayofthemonth();
}
inline void simData::clear_udayofthemonth() {
  udayofthemonth_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::_internal_udayofthemonth() const {
  return udayofthemonth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::udayofthemonth() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.uDayOfTheMonth)
  return _internal_udayofthemonth();
}
inline void simData::_internal_set_udayofthemonth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  udayofthemonth_ = value;
}
inline void simData::set_udayofthemonth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udayofthemonth(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.uDayOfTheMonth)
}

// required int32 uDayOfTheWeek = 8;
inline bool simData::_internal_has_udayoftheweek() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool simData::has_udayoftheweek() const {
  return _internal_has_udayoftheweek();
}
inline void simData::clear_udayoftheweek() {
  udayoftheweek_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::_internal_udayoftheweek() const {
  return udayoftheweek_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::udayoftheweek() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.uDayOfTheWeek)
  return _internal_udayoftheweek();
}
inline void simData::_internal_set_udayoftheweek(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  udayoftheweek_ = value;
}
inline void simData::set_udayoftheweek(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udayoftheweek(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.uDayOfTheWeek)
}

// required int32 uTimeZoneOffset = 9;
inline bool simData::_internal_has_utimezoneoffset() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool simData::has_utimezoneoffset() const {
  return _internal_has_utimezoneoffset();
}
inline void simData::clear_utimezoneoffset() {
  utimezoneoffset_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::_internal_utimezoneoffset() const {
  return utimezoneoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 simData::utimezoneoffset() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.uTimeZoneOffset)
  return _internal_utimezoneoffset();
}
inline void simData::_internal_set_utimezoneoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  utimezoneoffset_ = value;
}
inline void simData::set_utimezoneoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_utimezoneoffset(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.uTimeZoneOffset)
}

// required double dSimTime = 10;
inline bool simData::_internal_has_dsimtime() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool simData::has_dsimtime() const {
  return _internal_has_dsimtime();
}
inline void simData::clear_dsimtime() {
  dsimtime_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double simData::_internal_dsimtime() const {
  return dsimtime_;
}
inline double simData::dsimtime() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dSimTime)
  return _internal_dsimtime();
}
inline void simData::_internal_set_dsimtime(double value) {
  _has_bits_[0] |= 0x00000200u;
  dsimtime_ = value;
}
inline void simData::set_dsimtime(double value) {
  _internal_set_dsimtime(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dSimTime)
}

// required double dLatitude = 11;
inline bool simData::_internal_has_dlatitude() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool simData::has_dlatitude() const {
  return _internal_has_dlatitude();
}
inline void simData::clear_dlatitude() {
  dlatitude_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double simData::_internal_dlatitude() const {
  return dlatitude_;
}
inline double simData::dlatitude() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dLatitude)
  return _internal_dlatitude();
}
inline void simData::_internal_set_dlatitude(double value) {
  _has_bits_[0] |= 0x00000400u;
  dlatitude_ = value;
}
inline void simData::set_dlatitude(double value) {
  _internal_set_dlatitude(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dLatitude)
}

// required double dLongitude = 12;
inline bool simData::_internal_has_dlongitude() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool simData::has_dlongitude() const {
  return _internal_has_dlongitude();
}
inline void simData::clear_dlongitude() {
  dlongitude_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double simData::_internal_dlongitude() const {
  return dlongitude_;
}
inline double simData::dlongitude() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dLongitude)
  return _internal_dlongitude();
}
inline void simData::_internal_set_dlongitude(double value) {
  _has_bits_[0] |= 0x00000800u;
  dlongitude_ = value;
}
inline void simData::set_dlongitude(double value) {
  _internal_set_dlongitude(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dLongitude)
}

// required double dAltitude = 13;
inline bool simData::_internal_has_daltitude() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool simData::has_daltitude() const {
  return _internal_has_daltitude();
}
inline void simData::clear_daltitude() {
  daltitude_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double simData::_internal_daltitude() const {
  return daltitude_;
}
inline double simData::daltitude() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dAltitude)
  return _internal_daltitude();
}
inline void simData::_internal_set_daltitude(double value) {
  _has_bits_[0] |= 0x00001000u;
  daltitude_ = value;
}
inline void simData::set_daltitude(double value) {
  _internal_set_daltitude(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dAltitude)
}

// required double dPitch = 14;
inline bool simData::_internal_has_dpitch() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool simData::has_dpitch() const {
  return _internal_has_dpitch();
}
inline void simData::clear_dpitch() {
  dpitch_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double simData::_internal_dpitch() const {
  return dpitch_;
}
inline double simData::dpitch() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dPitch)
  return _internal_dpitch();
}
inline void simData::_internal_set_dpitch(double value) {
  _has_bits_[0] |= 0x00002000u;
  dpitch_ = value;
}
inline void simData::set_dpitch(double value) {
  _internal_set_dpitch(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dPitch)
}

// required double dBank = 15;
inline bool simData::_internal_has_dbank() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool simData::has_dbank() const {
  return _internal_has_dbank();
}
inline void simData::clear_dbank() {
  dbank_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double simData::_internal_dbank() const {
  return dbank_;
}
inline double simData::dbank() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dBank)
  return _internal_dbank();
}
inline void simData::_internal_set_dbank(double value) {
  _has_bits_[0] |= 0x00004000u;
  dbank_ = value;
}
inline void simData::set_dbank(double value) {
  _internal_set_dbank(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dBank)
}

// required double dHeading = 16;
inline bool simData::_internal_has_dheading() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool simData::has_dheading() const {
  return _internal_has_dheading();
}
inline void simData::clear_dheading() {
  dheading_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double simData::_internal_dheading() const {
  return dheading_;
}
inline double simData::dheading() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dHeading)
  return _internal_dheading();
}
inline void simData::_internal_set_dheading(double value) {
  _has_bits_[0] |= 0x00008000u;
  dheading_ = value;
}
inline void simData::set_dheading(double value) {
  _internal_set_dheading(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dHeading)
}

// required double dVelocityX = 17;
inline bool simData::_internal_has_dvelocityx() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool simData::has_dvelocityx() const {
  return _internal_has_dvelocityx();
}
inline void simData::clear_dvelocityx() {
  dvelocityx_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double simData::_internal_dvelocityx() const {
  return dvelocityx_;
}
inline double simData::dvelocityx() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dVelocityX)
  return _internal_dvelocityx();
}
inline void simData::_internal_set_dvelocityx(double value) {
  _has_bits_[0] |= 0x00010000u;
  dvelocityx_ = value;
}
inline void simData::set_dvelocityx(double value) {
  _internal_set_dvelocityx(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dVelocityX)
}

// required double dVelocityY = 18;
inline bool simData::_internal_has_dvelocityy() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool simData::has_dvelocityy() const {
  return _internal_has_dvelocityy();
}
inline void simData::clear_dvelocityy() {
  dvelocityy_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double simData::_internal_dvelocityy() const {
  return dvelocityy_;
}
inline double simData::dvelocityy() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dVelocityY)
  return _internal_dvelocityy();
}
inline void simData::_internal_set_dvelocityy(double value) {
  _has_bits_[0] |= 0x00020000u;
  dvelocityy_ = value;
}
inline void simData::set_dvelocityy(double value) {
  _internal_set_dvelocityy(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dVelocityY)
}

// required double dVelocityZ = 19;
inline bool simData::_internal_has_dvelocityz() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool simData::has_dvelocityz() const {
  return _internal_has_dvelocityz();
}
inline void simData::clear_dvelocityz() {
  dvelocityz_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double simData::_internal_dvelocityz() const {
  return dvelocityz_;
}
inline double simData::dvelocityz() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dVelocityZ)
  return _internal_dvelocityz();
}
inline void simData::_internal_set_dvelocityz(double value) {
  _has_bits_[0] |= 0x00040000u;
  dvelocityz_ = value;
}
inline void simData::set_dvelocityz(double value) {
  _internal_set_dvelocityz(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dVelocityZ)
}

// required double dTemperature = 20;
inline bool simData::_internal_has_dtemperature() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool simData::has_dtemperature() const {
  return _internal_has_dtemperature();
}
inline void simData::clear_dtemperature() {
  dtemperature_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double simData::_internal_dtemperature() const {
  return dtemperature_;
}
inline double simData::dtemperature() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dTemperature)
  return _internal_dtemperature();
}
inline void simData::_internal_set_dtemperature(double value) {
  _has_bits_[0] |= 0x00080000u;
  dtemperature_ = value;
}
inline void simData::set_dtemperature(double value) {
  _internal_set_dtemperature(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dTemperature)
}

// required double dAirPressure = 21;
inline bool simData::_internal_has_dairpressure() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool simData::has_dairpressure() const {
  return _internal_has_dairpressure();
}
inline void simData::clear_dairpressure() {
  dairpressure_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double simData::_internal_dairpressure() const {
  return dairpressure_;
}
inline double simData::dairpressure() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dAirPressure)
  return _internal_dairpressure();
}
inline void simData::_internal_set_dairpressure(double value) {
  _has_bits_[0] |= 0x00100000u;
  dairpressure_ = value;
}
inline void simData::set_dairpressure(double value) {
  _internal_set_dairpressure(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dAirPressure)
}

// required double dAirDensity = 22;
inline bool simData::_internal_has_dairdensity() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool simData::has_dairdensity() const {
  return _internal_has_dairdensity();
}
inline void simData::clear_dairdensity() {
  dairdensity_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double simData::_internal_dairdensity() const {
  return dairdensity_;
}
inline double simData::dairdensity() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dAirDensity)
  return _internal_dairdensity();
}
inline void simData::_internal_set_dairdensity(double value) {
  _has_bits_[0] |= 0x00200000u;
  dairdensity_ = value;
}
inline void simData::set_dairdensity(double value) {
  _internal_set_dairdensity(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dAirDensity)
}

// required double dWindVelocity = 23;
inline bool simData::_internal_has_dwindvelocity() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool simData::has_dwindvelocity() const {
  return _internal_has_dwindvelocity();
}
inline void simData::clear_dwindvelocity() {
  dwindvelocity_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double simData::_internal_dwindvelocity() const {
  return dwindvelocity_;
}
inline double simData::dwindvelocity() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dWindVelocity)
  return _internal_dwindvelocity();
}
inline void simData::_internal_set_dwindvelocity(double value) {
  _has_bits_[0] |= 0x00400000u;
  dwindvelocity_ = value;
}
inline void simData::set_dwindvelocity(double value) {
  _internal_set_dwindvelocity(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dWindVelocity)
}

// required double dWindDirection = 24;
inline bool simData::_internal_has_dwinddirection() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool simData::has_dwinddirection() const {
  return _internal_has_dwinddirection();
}
inline void simData::clear_dwinddirection() {
  dwinddirection_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double simData::_internal_dwinddirection() const {
  return dwinddirection_;
}
inline double simData::dwinddirection() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dWindDirection)
  return _internal_dwinddirection();
}
inline void simData::_internal_set_dwinddirection(double value) {
  _has_bits_[0] |= 0x00800000u;
  dwinddirection_ = value;
}
inline void simData::set_dwinddirection(double value) {
  _internal_set_dwinddirection(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dWindDirection)
}

// required double dWindX = 25;
inline bool simData::_internal_has_dwindx() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool simData::has_dwindx() const {
  return _internal_has_dwindx();
}
inline void simData::clear_dwindx() {
  dwindx_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double simData::_internal_dwindx() const {
  return dwindx_;
}
inline double simData::dwindx() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dWindX)
  return _internal_dwindx();
}
inline void simData::_internal_set_dwindx(double value) {
  _has_bits_[0] |= 0x01000000u;
  dwindx_ = value;
}
inline void simData::set_dwindx(double value) {
  _internal_set_dwindx(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dWindX)
}

// required double dWindY = 26;
inline bool simData::_internal_has_dwindy() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool simData::has_dwindy() const {
  return _internal_has_dwindy();
}
inline void simData::clear_dwindy() {
  dwindy_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double simData::_internal_dwindy() const {
  return dwindy_;
}
inline double simData::dwindy() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dWindY)
  return _internal_dwindy();
}
inline void simData::_internal_set_dwindy(double value) {
  _has_bits_[0] |= 0x02000000u;
  dwindy_ = value;
}
inline void simData::set_dwindy(double value) {
  _internal_set_dwindy(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dWindY)
}

// required double dWindZ = 27;
inline bool simData::_internal_has_dwindz() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool simData::has_dwindz() const {
  return _internal_has_dwindz();
}
inline void simData::clear_dwindz() {
  dwindz_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double simData::_internal_dwindz() const {
  return dwindz_;
}
inline double simData::dwindz() const {
  // @@protoc_insertion_point(field_get:simConnect.simData.dWindZ)
  return _internal_dwindz();
}
inline void simData::_internal_set_dwindz(double value) {
  _has_bits_[0] |= 0x04000000u;
  dwindz_ = value;
}
inline void simData::set_dwindz(double value) {
  _internal_set_dwindz(value);
  // @@protoc_insertion_point(field_set:simConnect.simData.dWindZ)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace simConnect

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_simconnectData_2eproto
